basePath: /
definitions:
  entities.BlacklistType:
    enum:
    - email
    - phone
    - username
    - ip
    - device
    - domain
    type: string
    x-enum-varnames:
    - BlacklistTypeEmail
    - BlacklistTypePhone
    - BlacklistTypeUsername
    - BlacklistTypeIP
    - BlacklistTypeDevice
    - BlacklistTypeDomain
  entities.UserStatus:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
    x-enum-varnames:
    - UserStatusActive
    - UserStatusBlocked
    - UserStatusBanned
    - UserStatusLimited
    - UserStatusInactive
  handlers.AddToBlacklistRequest:
    properties:
      reason:
        example: Spamming activity
        maxLength: 500
        type: string
      type:
        allOf:
        - $ref: '#/definitions/entities.BlacklistType'
        enum:
        - ip
        - email
        - username
        example: email
      value:
        example: baduser@example.com
        maxLength: 255
        type: string
    required:
    - type
    - value
    type: object
  handlers.DisableMFARequest:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  handlers.UpdateProfileRequest:
    properties:
      avatar:
        example: http://example.com/avatar.jpg
        type: string
      first_name:
        example: John
        maxLength: 50
        type: string
      last_name:
        example: Doe
        maxLength: 50
        type: string
      metadata:
        additionalProperties:
          type: string
        example:
          '{"favorite_color"': ' "blue"}'
        type: object
    type: object
  handlers.UpdateUserParamsRequest:
    properties:
      group_id:
        example: b2c3d4e5-f6a7-8901-2345-67890abcdef0
        format: uuid
        type: string
      role_id:
        example: a1b2c3d4-e5f6-7890-1234-567890abcdef
        format: uuid
        type: string
    type: object
  handlers.UpdateUserStatusRequest:
    properties:
      reason:
        example: Violated terms of service
        maxLength: 255
        type: string
      status:
        allOf:
        - $ref: '#/definitions/entities.UserStatus'
        description: Assuming UserStatus is int
        enum:
        - 1
        - 2
        - 3
        - 4
        - 5
        example: 2
        maximum: 5
        minimum: 1
    required:
    - status
    type: object
  handlers.VerifyEmailRequest:
    properties:
      token:
        example: some-verification-token
        type: string
    required:
    - token
    type: object
  handlers.VerifyPhoneRequest:
    properties:
      code:
        example: "123456"
        type: string
    required:
    - code
    type: object
  input.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        maxLength: 128
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  input.EnableMFARequest:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  input.ForgotPasswordRequest:
    properties:
      identifier:
        description: email, phone or username
        type: string
    required:
    - identifier
    type: object
  input.LoginRequest:
    properties:
      device_id:
        type: string
      ip_address:
        type: string
      password:
        type: string
      remember:
        type: boolean
      user_agent:
        type: string
      username:
        description: username, email, phone or id
        type: string
    required:
    - password
    - username
    type: object
  input.LogoutRequest:
    properties:
      logout_all:
        type: boolean
      refresh_token:
        type: string
    type: object
  input.RefreshTokenRequest:
    properties:
      device_id:
        type: string
      ip_address:
        type: string
      refresh_token:
        type: string
      user_agent:
        type: string
    required:
    - refresh_token
    type: object
  input.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 50
        type: string
      last_name:
        maxLength: 50
        type: string
      password:
        maxLength: 128
        minLength: 8
        type: string
      phone:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  input.ResetPasswordRequest:
    properties:
      new_password:
        maxLength: 128
        minLength: 8
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  input.VerifyMFARequest:
    properties:
      code:
        type: string
      device_id:
        type: string
    required:
    - code
    type: object
  utils.APIError:
    properties:
      code:
        type: string
      details: {}
      message:
        type: string
    type: object
  utils.APIResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/utils.APIError'
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:9090/api
info:
  contact: {}
  description: Authentication and User Management Microservice
  title: ms-auth API
  version: "1.0"
paths:
  /actuator/health:
    get:
      description: Returns OK if the service is running
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health check endpoint
      tags:
      - Health
  /admin/blacklist:
    get:
      description: Retrieves a paginated list of blacklist entries, optionally filtered
        by type. This endpoint is for administrators only.
      parameters:
      - description: Type of blacklist entry (e.g., ip, email, username)
        enum:
        - ip
        - email
        - username
        in: query
        name: type
        type: string
      - default: 20
        description: Number of entries to return (max 100)
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Blacklist retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    type: object
                  type: array
              type: object
        "401":
          description: Unauthorized - Admin privilege required
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Get blacklist entries (Admin Only)
      tags:
      - Admin - Blacklist Management
    post:
      consumes:
      - application/json
      description: Adds an IP, email, or username to the blacklist to prevent future
        access. This endpoint is for administrators only.
      parameters:
      - description: Add To Blacklist Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AddToBlacklistRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Added to blacklist successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body, validation error, or duplicate entry
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized - Admin privilege required
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Add entry to blacklist (Admin Only)
      tags:
      - Admin - Blacklist Management
  /admin/blacklist/{blacklist_id}:
    delete:
      description: Removes an entry from the blacklist by its ID. This endpoint is
        for administrators only.
      parameters:
      - description: Blacklist Entry ID
        in: path
        name: blacklist_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Removed from blacklist successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid blacklist ID
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized - Admin privilege required
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "404":
          description: Blacklist entry not found
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Remove entry from blacklist (Admin Only)
      tags:
      - Admin - Blacklist Management
  /admin/users:
    get:
      description: Retrieves a paginated list of all registered users. This endpoint
        is for administrators only.
      parameters:
      - default: 20
        description: Number of users to return (max 100)
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    type: object
                  type: array
              type: object
        "401":
          description: Unauthorized - Admin privilege required
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: List users (Admin Only)
      tags:
      - Admin - User Management
  /admin/users/{user_id}:
    delete:
      description: Deletes a user, either soft (default) or hard. This endpoint is
        for administrators only.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - default: false
        description: Perform a hard delete instead of soft delete
        in: query
        name: hard
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid user ID
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized - Admin privilege required
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Delete user (Admin Only)
      tags:
      - Admin - User Management
    get:
      description: Retrieves detailed information about a specific user by their ID.
        This endpoint is for administrators only.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid user ID
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized - Admin privilege required
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Get user by ID (Admin Only)
      tags:
      - Admin - User Management
  /admin/users/{user_id}/params:
    put:
      consumes:
      - application/json
      description: Updates the role and/or group of a specific user. This endpoint
        is for administrators only.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Update User Parameters Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserParamsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User parameters updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body, validation error, or invalid ID
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized - Admin privilege required
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Update user role and group (Admin Only)
      tags:
      - Admin - User Management
  /admin/users/{user_id}/status:
    put:
      consumes:
      - application/json
      description: Updates the status of a user (e.g., active, suspended, locked).
        This endpoint is for administrators only.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Update User Status Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User status updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body, validation error, or invalid user ID
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized - Admin privilege required
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Update user status (Admin Only)
      tags:
      - Admin - User Management
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Allows a logged-in user to change their password
      parameters:
      - description: Change Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/input.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or validation error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized or invalid current password
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Initiates the password reset process by sending an email with a
        reset link
      parameters:
      - description: Forgot Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/input.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or validation error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      summary: Request password reset
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/input.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: MFA required
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Invalid request body or validation error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Invalid credentials
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      summary: Log in a user
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate user's session and refresh token
      parameters:
      - description: Logout Request (optional)
        in: body
        name: request
        schema:
          $ref: '#/definitions/input.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Log out a user
      tags:
      - Auth
  /auth/me:
    get:
      description: Retrieves detailed information about the currently authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Get current user information
      tags:
      - User
  /auth/mfa/disable:
    post:
      consumes:
      - application/json
      description: Disables MFA for the logged-in user
      parameters:
      - description: Disable MFA Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.DisableMFARequest'
      produces:
      - application/json
      responses:
        "200":
          description: MFA disabled successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or validation error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized or invalid password
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Disable Multi-Factor Authentication (MFA)
      tags:
      - MFA
  /auth/mfa/enable:
    post:
      consumes:
      - application/json
      description: Enables MFA for the logged-in user
      parameters:
      - description: Enable MFA Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/input.EnableMFARequest'
      produces:
      - application/json
      responses:
        "200":
          description: MFA enabled successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or validation error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Enable Multi-Factor Authentication (MFA)
      tags:
      - MFA
  /auth/mfa/verify:
    post:
      consumes:
      - application/json
      description: Verifies MFA code and returns access token pair
      parameters:
      - description: Verify MFA Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/input.VerifyMFARequest'
      produces:
      - application/json
      responses:
        "200":
          description: MFA verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or validation error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized or invalid MFA code
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Verify Multi-Factor Authentication (MFA)
      tags:
      - MFA
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using a refresh token
      parameters:
      - description: Refresh Token Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/input.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or validation error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Register Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/input.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or validation error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "409":
          description: User with email already exists
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      summary: Register a new user
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Resets the user's password using a valid reset token
      parameters:
      - description: Reset Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/input.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body, validation error, or invalid/expired
            token
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      summary: Reset user password
      tags:
      - Auth
  /users/profile:
    get:
      description: Retrieves the detailed profile information of the currently authenticated
        user.
      produces:
      - application/json
      responses:
        "200":
          description: Profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "404":
          description: User not found
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - User Profile
    put:
      consumes:
      - application/json
      description: Updates the profile information of the currently authenticated
        user.
      parameters:
      - description: Update Profile Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body or validation error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - User Profile
  /users/sessions:
    get:
      description: Retrieves a list of all active sessions for the currently authenticated
        user.
      produces:
      - application/json
      responses:
        "200":
          description: Sessions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    type: object
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Get user active sessions
      tags:
      - User Sessions
  /users/sessions/{session_id}:
    delete:
      description: Revokes a single active session identified by its ID for the current
        user.
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session revoked successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid session ID
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "404":
          description: Session not found
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Revoke a specific user session
      tags:
      - User Sessions
  /users/sessions/revoke-all:
    post:
      description: Revokes all active sessions for the currently authenticated user,
        forcing re-login on other devices.
      produces:
      - application/json
      responses:
        "200":
          description: All sessions revoked successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Revoke all user sessions
      tags:
      - User Sessions
  /users/verify-email:
    post:
      description: Sends a new email verification link to the user's registered email
        address.
      produces:
      - application/json
      responses:
        "200":
          description: Email verification sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "409":
          description: Email already verified or too many requests
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Send email verification
      tags:
      - User Verification
  /users/verify-email/confirm:
    post:
      consumes:
      - application/json
      description: Verifies the user's email address using a provided verification
        token.
      parameters:
      - description: Verify Email Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body, validation error, or invalid/expired
            token
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Verify email with token
      tags:
      - User Verification
  /users/verify-phone:
    post:
      description: Sends a verification code to the user's registered phone number.
      produces:
      - application/json
      responses:
        "200":
          description: Phone verification code sent successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "409":
          description: Phone already verified or too many requests
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Send phone verification code
      tags:
      - User Verification
  /users/verify-phone/confirm:
    post:
      consumes:
      - application/json
      description: Verifies the user's phone number using a provided verification
        code.
      parameters:
      - description: Verify Phone Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.VerifyPhoneRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Phone verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Invalid request body, validation error, or invalid/expired
            code
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/utils.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Verify phone with code
      tags:
      - User Verification
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" + space + your JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
