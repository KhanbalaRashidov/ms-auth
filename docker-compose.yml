version: '3.9'

services:
  ms-auth:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DB_HOST: postgres
        DB_NAME: ms_auth
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        REDIS_HOST: redis
        REDIS_PASSWORD: ""
        JWT_SECRET_KEY: "your-production-secret-key-change-this"
    container_name: ms-auth
    ports:
      - "8080:8080"
    environment:
      # Server Configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - ENVIRONMENT=production
      - READ_TIMEOUT=30s
      - WRITE_TIMEOUT=30s
      - IDLE_TIMEOUT=120s

      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=ms_auth
      - DB_SSL_MODE=disable
      - DB_MAX_OPEN_CONNS=100
      - DB_MAX_IDLE_CONNS=10
      - DB_CONN_MAX_LIFETIME=1h
      - DB_CONN_MAX_IDLE_TIME=10m

      # JWT Configuration
      - JWT_SECRET_KEY=your-production-secret-key-change-this
      - JWT_ISSUER=ms-auth
      - JWT_AUDIENCE=ms-auth-api
      - JWT_ACCESS_DURATION=1h
      - JWT_REFRESH_DURATION=168h
      - JWT_RESET_DURATION=1h
      - JWT_VERIFICATION_DURATION=24h

      # Password Policy
      - PASSWORD_MIN_LENGTH=8
      - PASSWORD_MAX_LENGTH=128
      - PASSWORD_REQUIRE_UPPER=true
      - PASSWORD_REQUIRE_LOWER=true
      - PASSWORD_REQUIRE_DIGIT=true
      - PASSWORD_REQUIRE_SPECIAL=true
      - PASSWORD_PREVENT_REUSE=5
      - PASSWORD_MAX_AGE=90

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0

      # Email Configuration
      - SMTP_HOST=smtp.mailtrap.io
      - SMTP_PORT=587
      - SMTP_USERNAME=
      - SMTP_PASSWORD=
      - FROM_EMAIL=noreply@msauth.com
      - FROM_NAME=MS-Auth

      # Rate Limiting
      - RATE_LIMIT_LOGIN_ATTEMPTS=5
      - RATE_LIMIT_LOGIN_WINDOW=15m
      - RATE_LIMIT_REGISTER_ATTEMPTS=3
      - RATE_LIMIT_REGISTER_WINDOW=1h
      - RATE_LIMIT_REQUESTS_PER_MINUTE=100

      # Blacklist Configuration
      - BLACKLIST_CHECK_ON_REGISTER=true
      - BLACKLIST_CHECK_ON_LOGIN=true
      - BLACKLIST_AUTO_CLEANUP=true
      - BLACKLIST_CLEANUP_INTERVAL=24h

      # Security Configuration
      - SECURITY_ENABLE_MFA=true
      - SECURITY_REQUIRE_EMAIL_VERIFY=false
      - SECURITY_REQUIRE_PHONE_VERIFY=false
      - SECURITY_SESSION_TIMEOUT=24h
      - SECURITY_MAX_SESSIONS=5
      - SECURITY_ALLOW_MULTIPLE_LOGINS=true

      # CORS Configuration
      - CORS_ALLOW_ORIGINS=*
      - CORS_ALLOW_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - CORS_ALLOW_HEADERS=Origin, Content-Type, Accept, Authorization
      - CORS_ALLOW_CREDENTIALS=true
      - CORS_MAX_AGE=12h

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - ms-auth-network

  postgres:
    image: postgres:16-alpine
    container_name: ms-auth-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ms_auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - ms_auth_postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ms_auth"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - ms-auth-network

  redis:
    image: redis:7-alpine
    container_name: ms-auth-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ms_auth_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - ms-auth-network

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ms-auth-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ms-auth-network

volumes:
  ms_auth_postgres_data:
    driver: local
  ms_auth_redis_data:
    driver: local

networks:
  ms-auth-network:
    driver: bridge